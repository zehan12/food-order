import {
    Action,
    ActionCreatorWithPayload,
    createAction,
    createSlice,
} from "@reduxjs/toolkit";
import { FULFILLED, IDLE, PENDING, REJECTED } from "@/app/constants";

interface RestaurantState {
    email: string;
    restaurantName: string;
    city: string;
    address: string;
    contactNumber: number;
    createRestaurantStatus: string;
}

const initialState: RestaurantState = {
    email: "",
    restaurantName: "",
    city: "",
    address: "",
    contactNumber: 0,
    createRestaurantStatus: IDLE,
};

//Creating a mapping of all the action types for createRestaurant
export const createRestaurantActionTypes = {
    REQUEST: "/restaurant/createRestaurant/request",
    PENDING: "/restaurant/createRestaurant/pending",
    REJECTED: "/restaurant/createRestaurant/rejected",
    FULFILLED: "/restaurant/createRestaurant/fulfilled",
};

export const createRestaurantRequest: ActionCreatorWithPayload<object> =
    createAction(createRestaurantActionTypes.REQUEST);

const createRestaurantPendingReducer = (state: RestaurantState) => {
    state.createRestaurantStatus = PENDING;
};

const createRestaurantRejectedReducer = (state: RestaurantState) => {
    state.createRestaurantStatus = REJECTED;
};

interface createRestaurantFulfilledAction extends Action {
    type: string;
    payload: {
        data: {
            email: string;
            password: string;
            restaurantName: string;
            city: string;
            address: string;
            contactNumber: string;
        };
    };
}

const createRestaurantFulfilledReducer = (
    state: RestaurantState,
    action: createRestaurantFulfilledAction
) => {
    state.restaurantName = action.payload.data.restaurantName;
    state.email = action.payload.data.email;
    state.city = action.payload.data.city;
    state.address = action.payload.data.address;
    state.contactNumber = +action.payload.data.contactNumber;
    state.createRestaurantStatus = FULFILLED;
};

// Create a restaurant slice using createSlice
const restaurantSlice = createSlice({
    name: "restaurant",
    initialState,
    reducers: {
        resetRestaurantState: () => initialState,
    },
    extraReducers: (builder) => {
        builder.addCase(
            createRestaurantActionTypes.PENDING,
            createRestaurantPendingReducer
        );
        builder.addCase(
            createRestaurantActionTypes.FULFILLED,
            createRestaurantFulfilledReducer
        );
        builder.addCase(
            createRestaurantActionTypes.REJECTED,
            createRestaurantRejectedReducer
        );
    },
});

// Export the action creators generated by createSlice
export const { resetRestaurantState } = restaurantSlice.actions;

// Export the reducer function generated by createSlice
export default restaurantSlice.reducer;
